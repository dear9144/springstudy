package com.gdu.app11.service;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.net.URLEncoder;
import java.nio.file.Files;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.Model;
import org.springframework.util.FileCopyUtils;
import org.springframework.util.MultiValueMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.gdu.app11.domain.AttachDTO;
import com.gdu.app11.domain.UploadDTO;
import com.gdu.app11.mapper.UploadMapper;
import com.gdu.app11.util.MyFileUtil;

import lombok.AllArgsConstructor;
import net.coobird.thumbnailator.Thumbnails;

@Service
@AllArgsConstructor  // field @Autowired 처리
public class UploadServiceImpl implements UploadService {

	// field
	private UploadMapper uploadMapper;
	private MyFileUtil myFileUtil;
	
	@Override
	public void getUploadList(Model model) {
		// TODO Auto-generated method stub
		List<UploadDTO> uploadList = uploadMapper.getUploadList();
		model.addAttribute("uploadList", uploadList);
	}
	
	
	
	@Transactional(readOnly = true)  // INSERT문을 2개 이상 수행하기 때문에 트랜잭션 처리가 필요하다.
	@Override
	public int addUpload(MultipartHttpServletRequest multipartRequest) {
		
		/* Upload 테이블에 UploadDTO 넣기 */
		
		// 제목, 내용 파라미터
		String uploadTitle = multipartRequest.getParameter("uploadTitle");
		String uploadContent = multipartRequest.getParameter("uploadContent");
		
		// DB로 보낼 UploadDTO 만들기
		UploadDTO uploadDTO = new UploadDTO();
		uploadDTO.setUploadTitle(uploadTitle);
		uploadDTO.setUploadContent(uploadContent);
		
		// DB로 UploadDTO 보내기
		int uploadResult = uploadMapper.addUpload(uploadDTO);  // <selectKey>에 의해서 uploadDTO 객체의 uploadNo 필드에 UPLOAD_SEQ.NEXTVAL값이 저장된다.
		
		/* Attach 테이블에 AttachDTO 넣기 */
		
		// 첨부된 파일 목록
		List<MultipartFile> files = multipartRequest.getFiles("files");  // <input type="file" name="files">
		
		// 첨부된 파일이 있는지 체크
		if(files != null && files.isEmpty() == false) {
			
			// 첨부된 파일 목록 순회
			for(MultipartFile multipartFile : files) {
				
				// 예외 처리
				try {
					
					/* HDD에 첨부 파일 저장하기 */
					
					// 첨부 파일의 저장 경로
					String path = myFileUtil.getPath();
					
					// 첨부 파일의 저장 경로가 없으면 만들기
					File dir = new File(path);
					if(dir.exists() == false) {
						dir.mkdirs();
					}
					
					// 첨부 파일의 원래 이름
					String originName = multipartFile.getOriginalFilename();
					originName = originName.substring(originName.lastIndexOf("\\") + 1);  // IE는 전체 경로가 오기 때문에 마지막 역슬래시 뒤에 있는 파일명만 사용한다.
					
					// 첨부 파일의 저장 이름
					String filesystemName = myFileUtil.getFilesystemName(originName);
					
					// 첨부 파일의 File 객체 (HDD에 저장할 첨부 파일)
					File file = new File(dir, filesystemName);
					
					// 첨부 파일을 HDD에 저장
					multipartFile.transferTo(file);  // 실제로 서버에 저장된다.
					
					/* 썸네일(첨부 파일이 이미지인 경우에만 썸네일이 가능) */
					
					// 첨부 파일의 Content-Type 확인
					String contentType = Files.probeContentType(file.toPath());  // 이미지 파일의 Content-Type : image/jpeg, image/png, image/gif, ...
					
					// DB에 저장할 썸네일 유무 정보 처리
					boolean hasThumbnail = contentType != null && contentType.startsWith("image");
					
					// 첨부 파일의 Content-Type이 이미지로 확인되면 썸네일을 만듬
					if(hasThumbnail) {
						
						// HDD에 썸네일 저장하기 (thumbnailator 디펜던시 사용)
						File thumbnail = new File(dir, "s_" + filesystemName);
						Thumbnails.of(file)
							.size(50, 50)
							.toFile(thumbnail);
						
					}
					
					/* DB에 첨부 파일 정보 저장하기 */
					
					// DB로 보낼 AttachDTO 만들기
					AttachDTO attachDTO = new AttachDTO();
					attachDTO.setFilesystemName(filesystemName);
					attachDTO.setHasThumbnail(hasThumbnail ? 1 : 0);
					attachDTO.setOriginName(originName);
					attachDTO.setPath(path);
					attachDTO.setUploadNo(uploadDTO.getUploadNo());
					
					// DB로 AttachDTO 보내기
					uploadMapper.addAttach(attachDTO);
					
				} catch(Exception e) {
					e.printStackTrace();
				}
				
			}
			
		}
		
		return uploadResult;
	
		
		
	}


	@Override
	public ResponseEntity<byte[]> display(int attachNo) {
		AttachDTO attachDTO = uploadMapper.getAttachNyNo(attachNo);
		
		ResponseEntity<byte[]> image = null;
		
		try {	
			File thumbnail = new File(attachDTO.getPath(), "s_" + attachDTO.getFilesystemName());
			image = new ResponseEntity<byte[]>(FileCopyUtils.copyToByteArray(thumbnail), HttpStatus.OK);
			
			return image;
		}catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	@Override
	public ResponseEntity<Resource> download(int attachNo) {
		// 다운로드 할 첨부 파일의 정보 가져오기 
		AttachDTO attachDTO = uploadMapper.getAttachNyNo(attachNo);
		
		//다운로드 할 첨부 파일의File 객체 -> Resource 객체 
		File file = new File(attachDTO.getPath(), attachDTO.getFilesystemName());
		Resource resource = new FileSystemResource(file);
		
		//다운로드 할 첨부 파일의 존재 여부 확인 
		if(resource.exists() == false) {
			return new ResponseEntity<Resource>(HttpStatus.NOT_FOUND);
		}
		//다운로드 횟수 증가하기
		uploadMapper.increaseDownloadCount(attachNo);
		
		//다운로드 되는 파일명 
		String originName = attachDTO.getOriginName();
		try {
			//InternetExpolrer
			if(userAgent.contains("Trident")) {
				originName = URLEncoder.encode(originName, "UTF-8").replace("+", " ");
			}
			
			else if(userAgent.contains("Edg")) {
				originName = URLEncoder.encode(originName, "UTF-8");
			}
			//other
			else {
				originName = new String(originName.getBytes("UTF-8"), "ISO-8859-1");
			}
			
		}catch(Exception e) {
			e.printStackTrace();
		}
		
		// 다운로드 응답 헤더 만들기
		MultiValueMap<String, String> responseHeader = new HttpHeaders();
		responseHeader.add("Content-Disposition", "attachment; filename=" + originName);
		responseHeader.add("Content-length", file.length() + "");
		
		//응답
		
		return new ResponseEntity<Resource>(resource, responseHeader, HttpStatus.OK);
	}
	
	
	@Override
	public ResponseEntity<Resource> downloadAll(int attachNo, String usergent) {
		//모든 첨부 파일을 zip 파일로 다운로드 하는 서비스 
		
		
		//zip 파일이 저장될 경로 
		String tempPath = myFileUtil.getTempPath();
		File dir = new File(tempPath);
		if(dir.exists() == false) {
			dir.mkdirs();
		}
		
		//zip 파일의 이름 
		String tempfileName = myFileUtil.getTempfileName();
		
		//zip 파일으 ㅣFile 객체
		File zfile= new File(tempPath, tempfileName); 
		
		
		//zip 파일을 생성하기 위한 java io Stream 선언 
		BufferedInputStream bin = null;
		ZipOutputStream zout = null;
		//다운로드할 첨부파일들의 정보(경로, 원래 이름, 저장된 이름) 가져오기 
		List<AttachDTO> attahList = uploadMapper.getAttachList(attachNo);
		
		try {
			//zipoutputStream zout 객체 생성 
			zout = new ZipOutputStream(new FileOutputStream(zfile));
			
			//첨부 파일들을 하나씩 순회하면서 읽어 들인 뒤 zip 파일에 추가하기 + 각 첨부파일들의 다운로드 횟수 증가시키기 
			for(AttachDTO attahDTO : attachList) {				
			//zip 파일에 첨부 파일 이름 등록(첨부 파일의 원래 이름)
			ZipEntry zipEntry = new ZipEntry(attachDTO.getOriginName());
			zout.putNextEntry(zipEntry);
			zout.closeEntry();
			
			//zip 파일에 첨부 파일 추가 
			bin = new BufferedInputStream(new FileInputStream(new File(attachDTO.getPath(), attachDTO))))
				
			//bin -> zout 으로 파일 복사하기 
			byte[] b = new byte[1024]; //1KB 단위로 복사하겠음 
			int readByte = 0;
			while((readByte = bin.read(b)) != -1) {
				zout.write(b, 0, readByte);
			}
			bin.close();
			// FileCopyUtils.copy(bin,zout);
			
			// 각 첨부 파일들의 다운로드 횟수 증가
			uploadMapper.increaseDownloadCount(attachDTO.getAttachNo());
			
			
			}
			zout.close();
		}catch (Exception e) {
			e.printStackTrace();
		}
		
		//다운로드 할 zip 파일의 객체 -> resource 객체
		Resource resource = new FileSystemResource(zfile);
		
		//다운로드 응답 헤더 만들기 
		MultiValueMap<String, String> responseHeader = new HttpHeaders();
		responseHeader.add("Content-Disposition", "attachment; filename=" + tempfileName);
		responseHeader.add("Content-length", zfile.length() + "");
		
		//응답
		return new ResponseEntity<Resource>(resource, responseHeader, HttpStatus.OK);
	}
		
		
		return null;
	}
	
}
